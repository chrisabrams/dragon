{"version":3,"sources":["../../../src/dragon/router/route.js"],"names":["escapeRegExp","optionalRegExp","paramRegExp","Route","pattern","Controller","action","options","allParams","requiredParams","optionalParams","createRegExp","replace","replaceParams","match","param","push","parseOptionalPortion","paramCapturePattern","regExp","RegExp","path","params","matches","exec","ref","slice","i","index","len","length","paramName","Array","paramsHash","paramIndex","testConstraints","testParams","charAt","optionalPortion","portion","s","cb","test","constraints","extractParams","name","hasOwnProperty","call","constraint"],"mappings":"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","file":"route.js","sourcesContent":["'use strict'\n\nvar escapeRegExp   = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g,\n    optionalRegExp = /\\((.*?)\\)/g,\n    paramRegExp    = /(?::|\\*)(\\w+)/g\n\n/**\n * Route Class\n *\n * @public\n * @class Route\n */\nclass Route {\n\n  constructor(pattern, Controller, action, options) {\n\n    this.action     = action\n    this.Controller = Controller\n    this.options    = options\n    this.pattern    = pattern\n\n    this.allParams      = []\n    this.requiredParams = []\n    this.optionalParams = []\n\n    this.createRegExp()\n\n  }\n\n  createRegExp() {\n\n    var pattern = this.pattern\n\n    pattern = pattern.replace(escapeRegExp, '\\\\$&')\n\n    this.replaceParams(pattern, (match, param) => {\n\n      return this.allParams.push(param)\n\n    })\n\n    pattern = pattern.replace(optionalRegExp, this.parseOptionalPortion)\n\n    pattern = this.replaceParams(pattern, (match, param) => {\n\n      this.requiredParams.push(param)\n      return this.paramCapturePattern(match)\n\n    })\n\n    return this.regExp = new RegExp(`^${pattern}(?=\\\\/*(?=\\\\?|$))`)\n\n  }\n\n  extractParams(path) {\n\n    var params  = {},\n        matches = this.regExp.exec(path)\n\n    var ref = matches.slice(1)\n\n    for (var i, index = i = 0, len = ref.length; i < len; index = ++i) {\n      var match     = ref[index]\n      var paramName = this.allParams.length ? this.allParams[index] : index\n      params[paramName] = match\n    }\n\n    return params\n\n  }\n\n  normalizeParams(params) {\n\n    if(params instanceof Array) {\n\n      if(params.length < this.requiredParams.length) return false\n\n      var paramsHash = {}\n\n      for (var paramIndex = i = 0, len = this.requiredParams.length; i < len; paramIndex = ++i) {\n\n        var paramName = this.requiredParams[paramIndex]\n\n        paramsHash[paramName] = params[paramIndex]\n\n      }\n\n      if(!this.testConstraints(paramsHash)) return false\n\n      params = paramsHash\n\n    }\n\n    else {\n\n      params = params || {}\n\n      if(!this.testParams(params)) return false\n\n    }\n\n    return params\n\n  }\n\n  paramCapturePattern(param) {\n\n    if(param.charAt(0) == ':') {\n      return '([^\\/\\?]+)'\n    }\n\n    else {\n      return '(.*?)'\n    }\n\n  }\n\n  parseOptionalPortion(match, optionalPortion) {\n\n    var portion = this.replaceParams(optionalPortion, (match, param) => {\n\n      this.optionalParams.push(param)\n\n      return this.paramCapturePattern(match)\n\n    })\n\n    return `(?:${portion})?`\n\n  }\n\n  removeTrailingSlash(path) {\n\n    if (path.slice(-1) === '/') {\n      path.slice(0, -1);\n    }\n\n    return path\n\n  }\n\n  replaceParams(s, cb) {\n\n    return s.replace(paramRegExp, cb)\n\n  }\n\n  test(path) {\n\n    if(!this.regExp.test(path)) return false\n\n    if(this.options.constraints) {\n      return this.testConstraints(this.extractParams(path))\n    }\n\n    return true\n\n  }\n\n  testConstraints() {\n\n    var constraints = this.options.constraints\n\n    if(constraints) {\n\n      for(var name in constraints) {\n\n        if(!{}.hasOwnProperty.call(constraints, name)) continue\n\n        constraint = constraints[name]\n\n        if(!constraint.test(params[name])) {\n\n          return false\n\n        }\n      }\n\n    }\n\n    return true\n\n  }\n\n  testParams(params) {\n\n    for(var i = 0, len = this.requiredParams.length; i < len; i++) {\n\n      paramName = this.requiredParams[i]\n\n      if(params[paramName] === void 0) {\n        return false\n      }\n\n    }\n\n    return this.testConstraints(params)\n\n  }\n\n}\n\nexport default Route\n"]}