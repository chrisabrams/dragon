{"version":3,"sources":["../../../src/dragon/event-source/index.js"],"names":["EventSourceMediator","options","path","Error","source","EventSource","eventEmitter","emit","emitEvent","bind","on","addListener","once","addOnceListener","off","removeListener","addEventListener","onMessage","onOpen","onClose","disposed","removeEventListener","dispose","e","prototype","mixin"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;IAMMA,mB;;AAEJ;;;;;;;AAOA,iCAA0B;AAAA,QAAdC,OAAc,yDAAJ,EAAI;AAAA;;AACxB,QAAG,CAACA,QAAQC,IAAT,IAAiB,OAAOD,QAAQC,IAAf,IAAuB,QAA3C,EAAqD,MAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;;AAErD,SAAKC,MAAL,GAAc,IAAIC,WAAJ,CAAgBJ,QAAQC,IAAxB,CAAd;;AAEA;AACA,QAAII,eAAe,sBAAnB;;AAEA,SAAKC,IAAL,GAAaD,aAAaE,SAAb,CAAuBC,IAAvB,CAA4BH,YAA5B,CAAb;AACA,SAAKI,EAAL,GAAaJ,aAAaK,WAAb,CAAyBF,IAAzB,CAA8BH,YAA9B,CAAb;AACA,SAAKM,IAAL,GAAaN,aAAaO,eAAb,CAA6BJ,IAA7B,CAAkCH,YAAlC,CAAb;AACA,SAAKQ,GAAL,GAAaR,aAAaS,cAAb,CAA4BN,IAA5B,CAAiCH,YAAjC,CAAb;;AAEA,SAAKF,MAAL,CAAYY,gBAAZ,CAA6B,SAA7B,EAAwC,KAAKC,SAAL,CAAeR,IAAf,CAAoB,IAApB,CAAxC,EAAmE,KAAnE;AACA,SAAKL,MAAL,CAAYY,gBAAZ,CAA6B,MAA7B,EAAqC,KAAKE,MAAL,CAAYT,IAAZ,CAAiB,IAAjB,CAArC,EAA6D,KAA7D;AACA,SAAKL,MAAL,CAAYY,gBAAZ,CAA6B,OAA7B,EAAsC,KAAKG,OAAL,CAAaV,IAAb,CAAkB,IAAlB,CAAtC,EAA+D,KAA/D;AACD;;;;8BAES;;AAER,UAAG,CAAC,KAAKW,QAAT,EAAmB;AACjB,aAAKhB,MAAL,CAAYiB,mBAAZ,CAAgC,SAAhC,EAA2C,KAAKJ,SAAhD,EAA2D,KAA3D;AACA,aAAKb,MAAL,CAAYiB,mBAAZ,CAAgC,MAAhC,EAAwC,KAAKH,MAA7C,EAAqD,KAArD;AACA,aAAKd,MAAL,CAAYiB,mBAAZ,CAAgC,OAAhC,EAAyC,KAAKF,OAA9C,EAAuD,KAAvD;;AAEA,wBAAMG,OAAN,CAAc,IAAd;AAED;AAEF;;;4BAEOC,C,EAAG;AACT,WAAKhB,IAAL,CAAU,OAAV,EAAmBgB,CAAnB;AACD;;;8BAESA,C,EAAG;AACX,WAAKhB,IAAL,CAAU,SAAV,EAAqBgB,CAArB;AACD;;;2BAEMA,C,EAAG;AACR,WAAKhB,IAAL,CAAU,MAAV,EAAkBgB,CAAlB;AACD;;;;;AAIH,sBAAcvB,oBAAoBwB,SAAlC,EAA6C,EAACC,sBAAD,EAA7C;;kBAEezB,mB","file":"index.js","sourcesContent":["import EventEmitter from '../events'\nimport mixin        from '../mixin'\nimport utils        from '../utils'\n\n/**\n * EventSourceMediator Class\n *\n * @public\n * @class EventSourceMediator\n */\nclass EventSourceMediator {\n\n  /**\n   * EventSourceMediator constructor\n   *\n   * @public\n   * @constructor\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    if(!options.path || typeof options.path != 'string') throw new Error('Path must be set to use Event Source')\n\n    this.source = new EventSource(options.path)\n\n    // TODO: figure out how to mixin this\n    var eventEmitter = new EventEmitter()\n\n    this.emit  = eventEmitter.emitEvent.bind(eventEmitter)\n    this.on    = eventEmitter.addListener.bind(eventEmitter)\n    this.once  = eventEmitter.addOnceListener.bind(eventEmitter)\n    this.off   = eventEmitter.removeListener.bind(eventEmitter)\n\n    this.source.addEventListener('message', this.onMessage.bind(this), false)\n    this.source.addEventListener('open', this.onOpen.bind(this), false)\n    this.source.addEventListener('error', this.onClose.bind(this), false)\n  }\n\n  dispose() {\n\n    if(!this.disposed) {\n      this.source.removeEventListener('message', this.onMessage, false)\n      this.source.removeEventListener('open', this.onOpen, false)\n      this.source.removeEventListener('error', this.onClose, false)\n\n      utils.dispose(this)\n\n    }\n\n  }\n\n  onClose(e) {\n    this.emit('close', e)\n  }\n\n  onMessage(e) {\n    this.emit('message', e)\n  }\n\n  onOpen(e) {\n    this.emit('open', e)\n  }\n\n}\n\nObject.assign(EventSourceMediator.prototype, {mixin})\n\nexport default EventSourceMediator\n"]}