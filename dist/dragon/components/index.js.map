{"version":3,"sources":["../../../src/dragon/components/index.js"],"names":["Component","options","uid","uniqueId","$","prototype","eventEmitter","emit","emitEvent","bind","on","addListener","once","addOnceListener","off","removeListener","attached","attachOnInit","disposed","directOptions","assignOptions","call","ensureContainer","attach","render","el","document","createElement","tagName","id","class","className","dispose","mixin"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;IAMMA,S;;AAEJ;;;;;;;AAOA,uBAA0B;AAAA;;AAAA,QAAdC,OAAc,yDAAJ,EAAI;AAAA;;AACxB,SAAKC,GAAL,GAAW,gBAAMC,QAAN,CAAe,IAAf,CAAX;AACA,SAAKC,CAAL,GAAS,gBAAKC,SAAL,CAAeD,CAAxB;;AAEA;AACA,QAAIE,eAAe,sBAAnB;;AAEA,SAAKC,IAAL,GAAaD,aAAaE,SAAb,CAAuBC,IAAvB,CAA4BH,YAA5B,CAAb;AACA,SAAKI,EAAL,GAAaJ,aAAaK,WAAb,CAAyBF,IAAzB,CAA8BH,YAA9B,CAAb;AACA,SAAKM,IAAL,GAAaN,aAAaO,eAAb,CAA6BJ,IAA7B,CAAkCH,YAAlC,CAAb;AACA,SAAKQ,GAAL,GAAaR,aAAaS,cAAb,CAA4BN,IAA5B,CAAiCH,YAAjC,CAAb;;AAEA,SAAKU,QAAL,GAAgB,KAAhB;AACA,SAAKC,YAAL,GAAoBhB,QAAQgB,YAAR,IAAwB,IAA5C;AACA,SAAKC,QAAL,GAAgB,KAAhB;;AAEA;;;;AAIA,SAAKC,aAAL,GAAqB,CACnB,cADmB,EAEnB,iBAFmB,EAGnB,OAHmB,EAGV;AACT,gBAJmB,EAKnB,WALmB,EAMnB,IANmB,EAOnB,OAPmB,EAQnB,cARmB,EASnB,SATmB,CAArB;;AAYA,oBAAKd,SAAL,CAAee,aAAf,CAA6BC,IAA7B,CAAkC,IAAlC,EAAwCpB,OAAxC;;AAEA;;AAEA;AACA,oBAAKI,SAAL,CAAeiB,eAAf,CAA+BD,IAA/B,CAAoC,IAApC;;AAEA,QAAG,CAAC,KAAKL,QAAN,IAAkB,KAAKC,YAA1B,EAAwC;;AAEtC,WAAKL,IAAL,CAAU,QAAV,EAAoB,YAAM;;AAExB,wBAAKP,SAAL,CAAekB,MAAf,CAAsBF,IAAtB;AAED,OAJD;AAMD;;AAED,SAAKG,MAAL;AACD;;AAED;;;;;;;6BAQS;AACP,WAAKC,EAAL,GAAUC,SAASC,aAAT,CAAuB,KAAKC,OAAL,IAAgB,KAAvC,CAAV;;AAEA,UAAG,KAAKC,EAAR,EAAe,KAAKJ,EAAL,CAAQI,EAAR,GAAoB,KAAKA,EAAzB;AACf,UAAG,KAAKC,KAAR,EAAe,KAAKL,EAAL,CAAQM,SAAR,GAAoB,KAAKD,KAAzB;;AAEf,WAAKvB,IAAL,CAAU,QAAV;;AAEA,aAAO,IAAP;AACD;;;8BAES;;AAER,UAAG,CAAC,KAAKW,QAAT,EAAmB;;AAEjB,wBAAMc,OAAN,CAAc,IAAd;AAED;AAEF;;;;;AAIH,sBAAchC,UAAUK,SAAxB,EAAmC;AACjC4B;AADiC,CAAnC;;kBAIejC,S","file":"index.js","sourcesContent":["'use strict'\n\n/**\n * Module Dependencies\n *\n * @ignore\n */\nimport EventEmitter from '../events'\nimport mixin        from '../mixin'\nimport View         from '../views/index'\nimport utils        from '../utils'\n\n/**\n * Component Class\n *\n * @public\n * @class Component\n */\nclass Component {\n\n  /**\n   * Component constructor\n   *\n   * @public\n   * @constructor\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    this.uid = utils.uniqueId(this)\n    this.$ = View.prototype.$\n\n    // TODO: figure out how to mixin this\n    var eventEmitter = new EventEmitter()\n\n    this.emit  = eventEmitter.emitEvent.bind(eventEmitter)\n    this.on    = eventEmitter.addListener.bind(eventEmitter)\n    this.once  = eventEmitter.addOnceListener.bind(eventEmitter)\n    this.off   = eventEmitter.removeListener.bind(eventEmitter)\n\n    this.attached = false\n    this.attachOnInit = options.attachOnInit || true\n    this.disposed = false\n\n    /*\n    Direct Options\n    Some options are important enough that they should be directly on the view. Also offers consistency for overriding certain properties.\n    */\n    this.directOptions = [\n      'attachOnInit',\n      'attachPlacement',\n      'class', // why did CSS use this?\n      'collection',\n      'container',\n      'id',\n      'model',\n      'renderOnInit',\n      'tagName'\n    ]\n\n    View.prototype.assignOptions.call(this, options)\n\n    //this._registry = {}\n\n    //console.log(this)\n    View.prototype.ensureContainer.call(this)\n\n    if(!this.attached && this.attachOnInit) {\n\n      this.once('render', () => {\n\n        View.prototype.attach.call(this)\n\n      })\n\n    }\n\n    this.render()\n  }\n\n  /*get() {\n\n  }\n\n  set(name, ) {\n\n  }*/\n\n  render() {\n    this.el = document.createElement(this.tagName || 'div')\n\n    if(this.id)    this.el.id        = this.id\n    if(this.class) this.el.className = this.class\n\n    this.emit('render')\n\n    return this\n  }\n\n  dispose() {\n\n    if(!this.disposed) {\n\n      utils.dispose(this)\n\n    }\n\n  }\n\n}\n\nObject.assign(Component.prototype, {\n  mixin\n})\n\nexport default Component\n"]}