{"version":3,"sources":["../../../src/dragon/views/collection-view.js"],"names":["CollectionView","options","View","container","console","error","uid","attached","el","ensureElement","idom","reducer","bind","innerHTML","getTemplate","refreshIDOM","renderAllItems","emit","collection","models","forEach","key","i","renderItem","model","view"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;AACA;;;;;;AAEA;;;;;;IAMMA,c;;;AAEJ;;;;;;;AAOA,4BAA0B;AAAA,QAAdC,OAAc,yDAAJ,EAAI;AAAA;AAAA,iJAClB,sBAAc,EAAd,EAAkB;AACtBC,YAAMD,QAAQC,IAAR;AADgB,KAAlB,EAEHD,OAFG,CADkB;AAIzB;;;;6BAEQ;;AAEP,UAAG,CAAC,KAAKE,SAAT,EAAoB;AAClBC,gBAAQC,KAAR,CAAc,2BAAd,EAA2C,KAAKC,GAAhD;AACA,eAAO,IAAP;AACD;;AAED,UAAG,KAAKC,QAAR,EAAkB;AAChB,eAAO,IAAP;AACD;;AAED,UAAG,KAAKC,EAAR,EAAY;AACV;AACD,OAFD,MAGK;AACH,aAAKC,aAAL;AACD;;AAED,WAAKC,IAAL,GAAY,iCAAgB,KAAKF,EAArB,EAAyB,EAAzB,EAA6B,KAAKG,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAA7B,CAAZ;;AAEA,WAAKJ,EAAL,CAAQK,SAAR,GAAoB,KAAKC,WAAL,EAApB;;AAEA,WAAKC,WAAL;;AAEA,WAAKC,cAAL;;AAEA,WAAKC,IAAL,CAAU,QAAV;;AAEA,aAAO,IAAP;AAED;;;qCAEgB;AAAA;;AAEf,UAAG,KAAKC,UAAR,EAAoB;AAClB,YAAIC,SAAS,KAAKD,UAAL,CAAgBC,MAA7B;AACA,4BAAYA,MAAZ,EAAoBC,OAApB,CAA6B,UAACC,GAAD,EAAMC,CAAN,EAAY;;AAEvC,iBAAKC,UAAL,CAAgBJ,OAAOE,GAAP,CAAhB,EAA6BC,CAA7B;AAED,SAJD;AAKD;AAEF;;;+BAEUE,K,EAAOF,C,EAAG;;AAEnB,WAAKG,IAAL,sBAA6BH,CAA7B,EAAkC,IAAI,KAAKpB,IAAT,CAAc;AAC9CsB;AAD8C,OAAd,CAAlC;AAID;;;;;kBAIYxB,c","file":"collection-view.js","sourcesContent":["'use strict'\n\n/**\n * Module Dependencies\n *\n * @ignore\n */\nimport {createContainer} from 'f12-stardux'\nimport View              from './index'\n\n/**\n * CollectionView Class\n *\n * @public\n * @class CollectionView\n */\nclass CollectionView extends View {\n\n  /**\n   * CollectionView constructor\n   *\n   * @public\n   * @constructor\n   * @param {Object} options\n   */\n  constructor(options = {}) {\n    super(Object.assign({}, {\n      View: options.View || View\n    }, options))\n  }\n\n  render() {\n\n    if(!this.container) {\n      console.error('Container type not valid.', this.uid)\n      return this\n    }\n\n    if(this.attached) {\n      return this\n    }\n\n    if(this.el) {\n      return\n    }\n    else {\n      this.ensureElement()\n    }\n\n    this.idom = createContainer(this.el, {}, this.reducer.bind(this))\n\n    this.el.innerHTML = this.getTemplate()\n\n    this.refreshIDOM()\n\n    this.renderAllItems()\n\n    this.emit('render')\n\n    return this\n\n  }\n\n  renderAllItems() {\n\n    if(this.collection) {\n      var models = this.collection.models\n      Object.keys(models).forEach( (key, i) => {\n\n        this.renderItem(models[key], i)\n\n      })\n    }\n\n  }\n\n  renderItem(model, i) {\n\n    this.view(`collection-view-${i}`, new this.View({\n      model\n    }))\n\n  }\n\n}\n\nexport default CollectionView\n"]}